---
// Pure Astro component for file uploads
---

<div class="upload-container">
  <div class="upload-title">Profile Picture</div>
  
  <div 
    class="drop-zone" 
    id="drop-zone"
    tabindex="0"
  >
    <input 
      type="file" 
      id="file-input" 
      accept="image/png,image/jpeg,.png,.jpg,.jpeg"
      style="display: none;"
    />
    
    <div id="upload-content">
      <div class="placeholder">
        <div class="placeholder-text">
          <span id="drop-text">Drag & drop an image here, or click to select</span>
        </div>
        <div class="placeholder-subtext">PNG, JPG up to 5MB</div>
      </div>
    </div>
  </div>

  <div id="error-message" class="error hidden"></div>
  <div id="loading" class="loading hidden">
    <div class="spinner"></div>
    <span>Uploading...</span>
  </div>
</div>

<script>
  import { ZenClient } from '@filezen/js';

  const zenClient = new ZenClient();
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const dropZone = document.getElementById('drop-zone') as HTMLDivElement;
  const uploadContent = document.getElementById('upload-content') as HTMLDivElement;
  const dropText = document.getElementById('drop-text') as HTMLSpanElement;
  const errorMessage = document.getElementById('error-message') as HTMLDivElement;
  const loading = document.getElementById('loading') as HTMLDivElement;

  let isUploading = false;
  let uploadResult: any = null;
  let dragCounter = 0;

  // Handle file selection
  async function handleUpload(file: File) {
    if (!file) return;

    errorMessage.classList.add('hidden');
    loading.classList.remove('hidden');
    isUploading = true;

    try {
      const result = await zenClient.upload(file);

      if (result.error) {
        throw new Error(result.error.message);
      }

      // Delete previous file if exists
      if (uploadResult) {
        zenClient.delete(uploadResult.id).then((deleteResult) => {
          if (deleteResult.error) {
            console.error('Previous file delete failed:', deleteResult.error);
          } else {
            console.log('Previous file deleted!');
          }
        });
      }

      uploadResult = result.file;
      showImage(result.file!.url!);
    } catch (error) {
      errorMessage.textContent = error instanceof Error ? error.message : 'Upload failed';
      errorMessage.classList.remove('hidden');
    } finally {
      loading.classList.add('hidden');
      isUploading = false;
    }
  }

  function showImage(url: string) {
    uploadContent.innerHTML = `
      <div class="image-container">
        <img 
          src="${url}" 
          alt="Profile" 
          class="profile-image"
          style="height: 8rem; width: 8rem; border-radius: 50%; object-fit: cover; object-position: center; display: block; overflow: hidden;"
        />
        <div class="overlay">
          <span class="overlay-text">Click to change</span>
        </div>
      </div>
    `;
  }

  // File input change handler
  fileInput?.addEventListener('change', (event) => {
    const target = event.target as HTMLInputElement;
    const file = target.files?.[0];
    if (file) {
      handleUpload(file);
    }
    target.value = ''; // Reset input
  });

  // Click handler
  dropZone?.addEventListener('click', () => {
    if (!isUploading) {
      fileInput?.click();
    }
  });

  // Keyboard handler
  dropZone?.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && !isUploading) {
      fileInput?.click();
    }
  });

  // Drag and drop handlers
  dropZone?.addEventListener('dragenter', (event) => {
    event.preventDefault();
    event.stopPropagation();
    dragCounter++;
    if (event.dataTransfer?.types.includes('Files') && !isUploading) {
      dropZone.classList.add('drag-active');
      dropText.textContent = 'Drop the image here';
    }
  });

  dropZone?.addEventListener('dragleave', (event) => {
    event.preventDefault();
    event.stopPropagation();
    dragCounter--;
    if (dragCounter === 0) {
      dropZone.classList.remove('drag-active');
      dropText.textContent = 'Drag & drop an image here, or click to select';
    }
  });

  dropZone?.addEventListener('dragover', (event) => {
    event.preventDefault();
    event.stopPropagation();
    if (event.dataTransfer?.types.includes('Files')) {
      event.dataTransfer.dropEffect = 'copy';
    }
  });

  dropZone?.addEventListener('drop', (event) => {
    event.preventDefault();
    event.stopPropagation();
    dragCounter = 0;
    dropZone.classList.remove('drag-active');
    dropText.textContent = 'Drag & drop an image here, or click to select';

    if (isUploading) return;

    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      const imageFile = Array.from(files).find(file =>
        file.type === 'image/png' || file.type === 'image/jpeg'
      );
      if (imageFile) {
        handleUpload(imageFile);
      }
    }
  });
</script>

<style>
  .upload-container {
    margin: 0 auto !important;
    width: 100% !important;
    max-width: 28rem !important;
    padding: 1rem !important;
    box-sizing: border-box;
  }

  .upload-container .upload-title {
    font-size: 1.125rem !important;
    font-weight: 500 !important;
    color: #e5e7eb !important;
    margin-bottom: 1rem !important;
    line-height: 1.5;
  }

  .upload-container .drop-zone {
    cursor: pointer !important;
    border-radius: 0.75rem !important;
    border: 2px dashed #4b5563 !important;
    padding: 1.5rem !important;
    text-align: center !important;
    transition: all 0.2s ease-in-out !important;
    background-color: transparent !important;
    margin-bottom: 1rem !important;
    min-height: 8rem;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
  }

  .upload-container .drop-zone:hover {
    border-color: #818cf8 !important;
  }

  .upload-container .drop-zone:focus {
    outline: none !important;
    box-shadow: 0 0 0 2px #6366f1, 0 0 0 4px rgba(99, 102, 241, 0.1) !important;
  }

  .upload-container .drop-zone.drag-active {
    border-color: #6366f1 !important;
    background-color: rgba(67, 56, 202, 0.1) !important;
  }

  .upload-container .drop-zone.uploading {
    cursor: not-allowed !important;
    opacity: 0.5 !important;
  }

  .upload-container .placeholder {
    display: flex !important;
    flex-direction: column !important;
    gap: 0.5rem !important;
    align-items: center;
    justify-content: center;
  }

  .upload-container .placeholder-text {
    color: #d1d5db !important;
    font-size: 1rem;
    text-align: center;
  }

  .upload-container .placeholder-subtext {
    font-size: 0.875rem !important;
    color: #9ca3af !important;
    text-align: center;
  }

     .upload-container .image-container {
     position: relative !important;
     display: flex;
     justify-content: center;
     align-items: center;
     width: 8rem;
     height: 8rem;
     margin: 0 auto;
     border-radius: 50%;
     overflow: hidden;
   }

   .upload-container .profile-image {
     margin: 0 auto !important;
     height: 8rem !important;
     width: 8rem !important;
     border-radius: 50% !important;
     object-fit: cover !important;
     object-position: center !important;
     box-shadow: 0 0 0 2px #374151 !important;
     display: block !important;
     overflow: hidden !important;
     max-width: 8rem !important;
     max-height: 8rem !important;
   }

  .upload-container .overlay {
    position: absolute !important;
    inset: 0 !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    border-radius: 50% !important;
    background-color: rgba(0, 0, 0, 0.7) !important;
    opacity: 0 !important;
    transition: opacity 0.2s ease-in-out !important;
  }

  .upload-container .image-container:hover .overlay {
    opacity: 1 !important;
  }

  .upload-container .overlay-text {
    font-size: 0.875rem !important;
    color: white !important;
    text-align: center;
  }

  .upload-container .error {
    border-radius: 0.375rem !important;
    border: 1px solid #991b1b !important;
    background-color: rgba(127, 29, 29, 0.2) !important;
    padding: 0.75rem !important;
    font-size: 0.875rem !important;
    color: #f87171 !important;
    margin-bottom: 1rem !important;
    box-sizing: border-box;
  }

  .upload-container .loading {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    gap: 0.5rem !important;
    color: #818cf8 !important;
    padding: 1rem;
  }

  .upload-container .spinner {
    height: 1.25rem !important;
    width: 1.25rem !important;
    border-radius: 50% !important;
    border: 2px solid transparent !important;
    border-bottom: 2px solid #818cf8 !important;
    animation: spin 1s linear infinite !important;
  }

  .upload-container .hidden {
    display: none !important;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style> 
